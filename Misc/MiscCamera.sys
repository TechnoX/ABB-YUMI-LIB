%%%
    VERSION:1
    LANGUAGE:ENGLISH
%%%

MODULE MiscCamera(SYSMODULE,NOVIEW)
    !**********************************************************
    !*                                                        *
    !* Module name: MiscCamera                                *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:                                           *
    !*                                                        *
    !* Various functions for managing / handling the cameras  *
    !*                                                        *
    !*                                                        *
    !* DEPENDENCIES: <Modules that this depend on>            *
    !*                                                        *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-16   1.0        Fredrik Löfgren      created   *
    !**********************************************************

    TASK PERS num VisionStatus:=1;
    TASK PERS num HandCamera_Kinv{3,3}:=[[0.000603527,-1.21629E-06,-0.403364],[0,0.000604937,-0.296785],[0,0,1]];
    TASK PERS num Yumi_App_ZOffset:=11.7;


    !**********************************************************
    !*                                                        *
    !* ROUTINE NAME: CalcCameraDepth                          *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:  This function calculates the camera depth*
    !*               given a lenght and 2 camera measurements *
    !*                                                        *
    !* IN:           length: physical distance in mm          *
    !*                       (measured with a ruler)          *
    !*               camPos1: See camPos2                     *
    !*               camPos2: camera measurements             *
    !*                        corresponding to the lenght,    *
    !*                        ie one measurement at each end  *
    !*               Kinv:                                    *
    !*                                                        *
    !* RETURN:       num: the Z coordinate of the object in   *
    !*                    camera work object                  *
    !*                                                        *
    !* NOTE:         This function will only work correctly if*
    !*               the measured object is orthogonal to the *
    !*               camera axis.                             *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-15   1.0        Ivan Lundberg        created   *
    !**********************************************************
    FUNC num CalcCameraDepth(num length,pos camPos1,pos camPos2,num Kinv{*,*})
        !VAR num Ka;
        VAR num dcx;
        VAR num dcy;
        VAR num hres{3,1};
        dcx:=camPos2.x-camPos1.x;
        dcy:=camPos2.y-camPos1.y;
        MatrixMultiply Kinv,[[dcx],[dcy],[0]],hres;
        !Ka:=Pow(Kinv{1,1},2)*Pow(dcx,2)+Pow(Kinv{1,2},2)*Pow(dcy,2)+Pow(Kinv{2,2},2)*Pow(dcy,2)+2*Kinv{1,2}*Kinv{1,1}*dcy*dcx;
        !return sqrt(Pow(length,2)*(Ka))/(Ka);
        RETURN length/sqrt(hres{1,1}*hres{1,1}+hres{2,1}*hres{2,1});
        RETURN 1;
    ENDFUNC


    !**********************************************************
    !*                                                        *
    !* ROUTINE NAME: CalcObjFrame                             *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:  Don't know                               *
    !*                                                        *
    !* IN:           trayPose:                                *
    !*               camPos:                                  *
    !*               Zoffset:                                 *
    !*               Kinv:                                    *
    !*                                                        *
    !* RETURN:       pos:                                     *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-15   1.0        Ivan Lundberg        created   *
    !**********************************************************
    FUNC pose CalcObjFrame(pose trayPose,num camPos{*},num Zoffset,num Kinv{*,*})
        VAR num T{4,4};
        VAR num nP{3};
        VAR num dP;
        VAR num camZ;
        VAR num pcam{3,1};
        VAR pose retPose;
        !Determine plane equation for tray pose
        posetoxform trayPose,T;
        nP:=[T{1,3},T{2,3},T{3,3}];
        dP:=-(nP{1}*T{1,4}+nP{2}*T{2,4}+nP{3}*T{3,4});
        !Solve for camZ from plane vision ray intersection
        camZ:=-(dP-Zoffset)/(nP{1}*Kinv{1,1}*camPos{1}+nP{1}*Kinv{1,2}*camPos{2}+nP{1}*Kinv{1,3}+nP{2}*Kinv{2,2}*camPos{2}+nP{2}*Kinv{2,3}+nP{3});
        MatrixMultiply Kinv,[[camPos{1}],[camPos{2}],[1]],pcam;
        retPose:=PoseMult([[0,0,0],trayPose.rot],[[0,0,0],OrientZYX(camPos{3},0,0)]);
        retPose.trans:=[pcam{1,1}*camZ,pcam{2,1}*camZ,camZ];
        RETURN retPose;
    ENDFUNC



    !**********************************************************
    !*                                                        *
    !* ROUTINE NAME: ReadVisionValues                         *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:  Reads all vision values for specified    *
    !*               tool                                     *
    !*                                                        *
    !* IN:           sToolName: Don't know ...                *
    !*                                                        *
    !* INOUT:        CameraResult: Don't know ...             *
    !*               nNumberFound: Don't know ...             *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-15   1.0        Ivan Lundberg        created   *
    !**********************************************************
    PROC ReadVisionValues(string sToolName,INOUT pos CameraResult{*},INOUT num nNumberFound)
        VAR string sIndex;
        VAR num nX;
        VAR num nY;
        VAR num nAngle;
        VAR num nNoFound;
        !VAR string sToolName:="Pattern_3";
        CamGetParameter HandCameraR,sToolName+".Number_Found"\NumVar:=nX;
        nNoFound:=nX;
        nNumberFound:=0;
        FOR i FROM 1 TO nNoFound DO
            IF i=1 THEN
                sIndex:="";
            ELSE
                sIndex:=NumToStr(i-1,0);
            ENDIF
            CamGetParameter HandCameraR,sToolName+".Fixture"+sIndex+".X"\NumVar:=nX;
            CamGetParameter HandCameraR,sToolName+".Fixture"+sIndex+".Y"\NumVar:=nY;
            CamGetParameter HandCameraR,sToolName+".Fixture"+sIndex+".Angle"\NumVar:=nAngle;
            IF nX<>0 AND nY<>0 AND nAngle<>0 THEN
                Incr nNumberFound;
                CameraResult{nNumberFound}:=[nX,nY,nAngle];
            ENDIF
        ENDFOR
    ENDPROC

    !**********************************************************
    !*                                                        *
    !* ROUTINE NAME: ReadVisionValues2                        *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:  Reads all vision values for specified    *
    !*               tool                                     *
    !*                                                        *
    !* IN:           sToolName: Don't know ...                *
    !*               nSceneId: Don't know ...                 *
    !*                                                        *
    !* INOUT:        CameraResult: Don't know ...             *
    !*               nNumberFound: Don't know ...             *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-15   1.0        Ivan Lundberg        created   *
    !**********************************************************
    PROC ReadVisionValues2(string sToolName,num nSceneId,INOUT pos CameraResult{*},INOUT num nNumberFound)
        VAR cameratarget camResult;
        nNumberFound:=0;
        WHILE TRUE DO
            CamGetResult HandCameraR,camResult\SceneId:=nSceneId\MaxTime:=1;
            IF camResult.cframe.trans<>[0,0,0] THEN
                Incr nNumberFound;
                CameraResult{nNumberFound}:=[camResult.cframe.trans.x,camResult.cframe.trans.y,EulerZYX(\Z,camResult.cframe.rot)];
            ENDIF
        ENDWHILE
    ERROR
        IF ERRNO=ERR_CAM_NO_MORE_DATA OR ERRNO=ERR_CAM_MAXTIME THEN
            !No more results
            RETURN ;
        ENDIF
    ENDPROC


    !**********************************************************
    !*                                                        *
    !* ROUTINE NAME: InitCamera                               *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:  Load camera job that locates the gripper *
    !*               marker                                   *
    !*                                                        *
    !* IN:           camera: The camera to load job to        *
    !*               job: The job to load                     *
    !*                                                        *
    !* OPTIONAL:     ReloadJob: Force to load even if job     *
    !*                          already exists on camera      *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-16   1.0        YuMi App             created   *
    !**********************************************************
    PROC InitCamera(VAR cameradev camera,string job\switch ReloadJob)
        !Load camera job that locates the gripper marker
        CamSetProgramMode camera;
        WaitTime 1;

        IF CamGetLoadedJob(camera)<>job OR Present(ReloadJob) THEN
            CamLoadJob camera,job;
        ENDIF

        CamSetRunMode camera;
        WaitTime 1;
        !Flaw in RobotWare WI111267

    ERROR
        IF ERRNO=ERR_CAM_COM_TIMEOUT THEN
            WaitTime 1.0;
            RETRY;
        ENDIF
    ENDPROC

    !**********************************************************
    !*                                                        *
    !* ROUTINE NAME: TakePicture                              *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:  Requests an image, finds the position    *
    !*               and stores X, Y and angle in result.     *
    !*                                                        *
    !* IN:           camera: Camera device to use             *
    !*                                                        *
    !* INOUT:        num{*}: The result from the camera       *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-16   1.0        YuMi App             created   *
    !**********************************************************
    PROC TakePicture(VAR cameradev camera,VAR num result{*})
        VAR cameratarget cameraResult;

        CamReqImage camera;
        CamGetResult camera,cameraResult\MaxTime:=5;

        result{1}:=cameraResult.cframe.trans.x;
        result{2}:=cameraResult.cframe.trans.y;
        !result{3}:=CameraResult.cframe.trans.z;
        result{3}:=EulerZYX(\Z,cameraResult.cframe.rot);

        WaitTime 2.0;
        VisionStatus:=3;

    ERROR
        IF ERRNO=ERR_CAM_MAXTIME THEN
            TPWrite "Could not find the target";
            WaitTime 2.0;
            VisionStatus:=2;
            Stop;
        ENDIF
    ENDPROC


    !**********************************************************
    !*                                                        *
    !* ROUTINE NAME: RestoreCtrlToCamera                      *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:  Don't know ...                           *
    !*                                                        *
    !* IN:           cam: The camera device to use            *
    !*               replaceecistingfiles: Var name explains  *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-16   1.0        YuMi App             created   *
    !**********************************************************
    PROC RestoreCtrlToCamera(var cameradev cam,bool replaceexistingfiles)
        VAR string ctrldirname:="HOME:/IV/";
        VAR dir ctrldirectory;
        VAR string camdirname;
        VAR string tempfilename;
        VAR string tempcamfilepath;
        VAR string tempctrlfilepath;
        VAR bool oktocopy:=FALSE;

        camdirname:=CamGetName(cam)+":/";
        ctrldirname:=ctrldirname+"/";
        OpenDir ctrldirectory,ctrldirname;

        WHILE ReadDir(ctrldirectory,tempfilename) DO
            !Only copy .job and .cxd files
            IF ((StrMatch(tempfilename,1,".job")<=strlen(tempfilename)) OR (StrMatch(tempfilename,1,".cxd")<=strlen(tempfilename))) AND tempfilename<>"." AND tempfilename<>".." THEN
                oktocopy:=TRUE;
            ELSE
                oktocopy:=FALSE;
            ENDIF

            IF oktocopy THEN
                tempcamfilepath:=camdirname+tempfilename;
                tempctrlfilepath:=ctrldirname+tempfilename;
                CopyFile tempctrlfilepath,tempcamfilepath;
            ENDIF
        ENDWHILE

        CloseDir ctrldirectory;
    ERROR
        IF ERRNO=ERR_FILEEXIST THEN
            IF replaceexistingfiles THEN
                RemoveFile tempcamfilepath;
                RETRY;
            ELSE
                TRYNEXT;
            ENDIF
        ENDIF
    ENDPROC

    !**********************************************************
    !*                                                        *
    !* ROUTINE NAME: CalcVisionWobjHandCamera                 *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:  Calculates a wobj from two images, given *
    !*               a already defined working plane          *
    !*                                                        *
    !* IN:           pTakePicture: Where to take picture      *
    !*               CameraValue: Don't know ...              *
    !*                                                        *
    !* OPTIONAL:     psImagePlane: The plane where the object *
    !*                             is located on.             *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-16   1.0        YuMi App             created   *
    !**********************************************************
    FUNC wobjdata CalcVisionWobjHandCamera(robtarget pTakePicture,pos CameraValue,\pose psImagePlane)
        VAR pose tablePose;
        VAR num nCameraFrameAngle;
        VAR pose psImagePlaneProjection;
        VAR pose psIPinv;
        VAR wobjdata retWobj;

        retWobj.robhold:=FALSE;
        retWobj.ufprog:=TRUE;
        IF Present(psImagePlane) THEN
            tablePose:=psImagePlane;
        ELSE
            tablePose.trans:=[0,0,0];
            tablePose.rot:=OrientZYX(180,0,180);
        ENDIF
        retWobj.uframe:=[pTakePicture.trans,pTakePicture.rot];
        !Express the ImagePlane in CameraFrame
        psImagePlaneProjection:=PoseMult(PoseInv(retWobj.uframe),tablePose);
        psIPinv:=PoseInv(psImagePlaneProjection);
        !Take Z angle of CameraFrame expressed in tablepose
        nCameraFrameAngle:=EulerZYX(\Z,psIPinv.rot);
        !Add the CameraFrame rotation about Z axis.  
        psImagePlaneProjection:=PoseMult(psImagePlaneProjection,[[0,0,0],OrientZYX(nCameraFrameAngle,0,0)]);

        retWobj.oframe:=CalcObjFrame(psImagePlaneProjection,[CameraValue.x,CameraValue.y,CameraValue.z],-Yumi_App_ZOffset,HandCamera_Kinv);
        retWobj.oframe:=PoseMult(retWobj.oframe,[[0,0,0],OrientZYX(0,180,0)]);
        RETURN retWobj;
    ENDFUNC
    
ENDMODULE
