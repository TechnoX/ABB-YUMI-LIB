MODULE InteractionBackground(SYSMODULE)
    !**********************************************************
    !*                                                        *
    !* Module name: InteractionBackground                     *
    !*                                                        *
    !**********************************************************
    !*                                                        *
    !* DESCRIPTION:                                           *
    !*                                                        *
    !* This module is intented to be ran as a background task *
    !* It will supervise the joints and fire a trap if        *
    !* someone is tapping the robots joints.                  *
    !*                                                        *
    !*                                                        *
    !* DEPENDENCIES: Internal                                 *
    !*                                                        *
    !*                                                        *
    !* Date:        Version:   Programmer:          Reason:   *
    !* 2016-07-16   1.0        Ivan Lundberg        created   *
    !**********************************************************

    CONST string sMechUnitName{2}:=["ROB_R","ROB_L"];
    CONST num nNameLength{2}:=[5,5];
    VAR num nColl_Torque{2};
    VAR num nSpeed{2,7};
    VAR num nMaxSpeed{2};
    VAR num nTorque{2,7};

    VAR signaldo doTorqueSup{2};
    VAR signaldo doSpeedSup{2};
    VAR signaldo doCollTorqueSup{2};

    PERS bool bCross;

    PERS bool bSoftActive;
    PERS bool bActivateSoft;
    VAR num nLastTimeRead;
    LOCAL PERS bool bRobotMoving:=FALSE;

    LOCAL VAR bool bTorqueLimitActive{2};
    !Only activate torque monitor/limit if active axis is an integer 0-7
    LOCAL VAR num nTorqueLimitAxisLocal{2};

    !VAR num RobNo;

    VAR intnum err_interrupt;
    VAR trapdata err_data;
    VAR errdomain err_domain;
    VAR num err_number;
    VAR errtype err_type;


    !********************************************************************************************************************************************************************
    !   *****    Torque monitoring   ****
    !
    !   All data needed for torque monitoring
    !
    !********************************************************************************************************************************************************************


    !ROB_R =1, ROB_L=2
    PERS num nMaxLoggedSpeed{2};
    PERS num nMaxLoggedCollTorque{2};
    PERS num nMaxLoggedTorque{2};

    ! Bra för att läsa av kollisioner
    PERS num nColl_TorqueLimit{2};
    PERS num nSpeedLimit{2};
    PERS bool bYuMiLibStopActive{2};
    PERS num nTorqueLimit{2};

    !One axis per arm can be setup to monitor abs value of torque
    PERS num nTorqueLimitActiveAxis{2};


    PROC main()
        VAR string IOName;
        VAR bool bStopFirstTime;
        !sMechUnitName:=GetMecUnitName(ROB_ID);

        DefineTestSignals;
        bRobotMoving:=FALSE;
        ClkStart clock1;
        FOR RobNo FROM 1 TO 2 DO
            IOName:="doTorqueSup"+sMechUnitName{RobNo};
            AliasIO IOName,doTorqueSup{RobNo};
            IOName:="doSpeedSup"+sMechUnitName{RobNo};
            AliasIO IOName,doSpeedSup{RobNo};
            IOName:="doCollTorqueSup"+sMechUnitName{RobNo};
            AliasIO IOName,doCollTorqueSup{RobNo};
        ENDFOR
        !WaitSyncTask syncTestSignDefine,task_list_All;

        !CONNECT err_interrupt WITH trap_err;
        !IError MOTION_ERR,TYPE_ERR,err_interrupt;

        TPWrite "Start YuMiLibBG";
        !WaitTime 1;
        WHILE TRUE DO
            !Run control loop for both arms
            FOR RobNo FROM 1 TO 2 DO
                !Read joint data
                nColl_Torque{RobNo}:=TestSignRead(RobNo);
                nMaxSpeed{RobNo}:=0;
                nTorqueLimitAxisLocal{RobNo}:=Round(nTorqueLimitActiveAxis{RobNo});
                IF nTorqueLimitAxisLocal{RobNo}>=1 AND nTorqueLimitAxisLocal{RobNo}<=7 THEN
                    bTorqueLimitActive{RobNo}:=TRUE;
                ELSE
                    bTorqueLimitActive{RobNo}:=FALSE;
                ENDIF
                FOR i FROM 1 TO 7 DO
                    GetJointData RobNo,i,sMechUnitName{RobNo},nNameLength{RobNo};
                    IF Abs(nSpeed{RobNo,i})>nMaxSpeed{RobNo}nMaxSpeed{RobNo}:=Abs(nSpeed{RobNo,i});
                ENDFOR
                IF bTorqueLimitActive{RobNo} THEN
                    IF Abs(nTorque{RobNo,nTorqueLimitAxisLocal{RobNo}})>nMaxLoggedTorque{RobNo} THEN
                        nMaxLoggedTorque{RobNo}:=Abs(nTorque{RobNo,nTorqueLimitAxisLocal{RobNo}});
                    ENDIF
                ENDIF

                !Log max values
                IF nColl_Torque{RobNo}>nMaxLoggedCollTorque{RobNo}nMaxLoggedCollTorque{RobNo}:=nColl_Torque{RobNo};
                IF nMaxSpeed{RobNo}>nMaxLoggedSpeed{RobNo}nMaxLoggedSpeed{RobNo}:=nMaxspeed{RobNo};

                !Set supervision values
                IF nColl_Torque{RobNo}>nColl_TorqueLimit{RobNo} THEN
                    Set doCollTorqueSup{RobNo};
                ELSE
                    Reset doCollTorqueSup{RobNo};
                ENDIF

                IF nMaxSpeed{RobNo}>nSpeedLimit{RobNo} THEN
                    Set doSpeedSup{RobNo};
                ELSE
                    Reset doSpeedSup{RobNo};
                ENDIF

                IF bTorqueLimitActive{RobNo} THEN
                    IF nTorque{RobNo,nTorqueLimitAxisLocal{RobNo}}>nTorqueLimit{RobNo} THEN
                        Set doTorqueSup{RobNo};
                    ELSE
                        Reset doTorqueSup{RobNo};
                    ENDIF
                ENDIF

            ENDFOR
            !Stop if collision


            !TapControl
            IF soRobNotMoving=1 AND soMotionSup=1 AND soCycleOn=0 THEN

                IF bStopFirstTime THEN
                    WaitTime 0.5;
                    nMaxLoggedSpeed{1}:=0;
                    nMaxLoggedSpeed{2}:=0;
                    bStopFirstTime:=FALSE;
                ELSE
                    IF nMaxLoggedSpeed{1}>0.5 OR nMaxLoggedSpeed{2}>0.5 THEN
                        PulseDO\PLength:=1,doStart;
                        WaitTime 1.5;
                        nMaxLoggedSpeed{1}:=0;
                        nMaxLoggedSpeed{2}:=0;
                    ENDIF
                ENDIF
            ELSE
                bStopFirstTime:=TRUE;
            ENDIF
            WaitTime 0.005;
        ENDWHILE
    ENDPROC





    TRAP trap_err
        GetTrapData err_data;
        ReadErrData err_data,err_domain,err_number,err_type;
        ! St domain no 1 ... 11
        !SetGO go_err1,err_domain;
        ! Set error no 1 ...9999
        !SetGO go_err2,err_number;

        TPWrite "err_domain "\Num:=err_domain;
        TPWrite "err_number "\Num:=err_number;
        IF err_domain=MOTION_ERR AND (err_number=28 OR err_number=436) THEN
            !IF bRestartMoveYActive THEN
            !    bRestartMoveYActive:=FALSE;
            !    bRestartMoveYOrdered:=TRUE;
            !    TPWrite "Restart move with J instead";
            !    WaitUntil DOutput(soCycleOn)=0;
            !    WaitTime 1;
            !    PulseDO\PLength:=1,doStartTest;
            !ENDIF
        ELSEIF err_domain=MOTION_ERR AND (err_number=56) THEN
            !Joint collision = 56, Joint position = 21 
            !enable leadthrough for both arms
            !turn of both grippers
            !Put motors back on
            !
            SetGO hand_CmdGripper_R,10;
            SetGO hand_CmdGripper_L,10;
            Waituntil hand_SysState_R=0;
            Waituntil hand_SysState_L=0;
            SetGO hand_CmdGripper_R,0;
            SetGO hand_CmdGripper_L,0;
            PulseDO\PLength:=1,VP_MOTOPB;
            WaitTime 1;
            ActivateLeadThrough "ROB_R";
            ActivateLeadThrough "ROB_L";
        ENDIF

    ENDTRAP
ENDMODULE