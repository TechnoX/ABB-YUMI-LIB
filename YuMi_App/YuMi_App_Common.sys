MODULE YuMi_App_Common (SYSMODULE, NOVIEW)
     !
     ! This code was generated by a tool.
	 ! Changes to this file may cause incorrect behavior and will be lost if
	 ! the code is regenerated.
    !--------------------------
	CONST string YuMi_App_Version := "1.0.1";

	PERS loaddata YuMi_App_SelLoadL := [0.001, [0, 0, 1],[1, 0, 0, 0], 0, 0, 0];
	PERS loaddata YuMi_App_SelLoadR := [0.001, [0, 0, 1],[1, 0, 0, 0], 0, 0, 0];

	PERS speeddata YuMi_App_SelSpeedR:=[1500,500,5000,1000];
	PERS speeddata YuMi_App_SelSpeedL:=[1500,500,5000,1000];

	PERS zonedata YuMi_App_SelZoneR:= [FALSE,10,15,15,1.5,15,1.5];
	PERS zonedata YuMi_App_SelZoneL:= [FALSE,10,15,15,1.5,15,1.5];

	PERS tooldata YuMi_App_SelToolR:=[ TRUE, [ [0, 0, 136], [1, 0, 0 ,0] ], [0.23, [8.2, 11.7, 52], [1, 0, 0, 0], 0.00021, 0.00024, 9E-05] ];
	PERS tooldata YuMi_App_SelToolL:= [ TRUE, [ [0, 0, 136], [1, 0, 0 ,0] ], [0.23, [8.2, 11.7, 52], [1, 0, 0, 0], 0.00021, 0.00024, 9E-05] ];

    PERS tasks YuMi_App_task_list{2} := [ ["T_ROB_L"], ["T_ROB_R"] ];
	VAR syncident YuMi_App_sync1;
	
    !--------------------------
	TASK PERS tooldata YuMi_App_move_tool_local := [ TRUE, [ [0, 0, 136], [1, 0, 0 ,0] ], [0.23, [8.2, 11.7, 52], [1, 0, 0, 0], 0.00021, 0.00024, 9E-05] ];
    TASK PERS speeddata YuMi_App_move_speed_local :=[1500,100,5000,1000];
    TASK PERS zonedata YuMi_App_move_zone_local :=[FALSE,10,15,15,1.5,15,1.5];

    PROC Move(
		\switch J | switch L,
        robtarget ToPoint
        \speeddata Speed
        \zonedata Zone
		\tooldata Tool)
        IF Present(J) THEN
            Move_internal \J, ToPoint \Speed?Speed \Zone?Zone \Tool?Tool ;
        ELSEIF Present(L) THEN
            Move_internal \L, ToPoint \Speed?Speed \Zone?Zone \Tool?Tool ;
		ELSE
			Move_internal ToPoint \Speed?Speed \Zone?Zone \Tool?Tool ;
        ENDIF        
        
    BACKWARD
        !TPWrite "Move BACKWARD";
        Move_internal ToPoint \Speed?Speed \Zone?Zone \Tool?Tool;


        ERROR
            IF ERRNO = ERR_PATH_STOP OR ERRNO = ERR_COLL_STOP THEN
               ! Asynchronous error handling. Raise the error to the user without ending instruction
                RaiseToUser \Continue;
            ELSE
               ! Instruction detects the error, instruction is ended
               RAISE;
            ENDIF
        
    ENDPROC

    PROC MoveSync(
		\switch J | switch L,
        robtarget ToPoint
        \speeddata Speed
        \zonedata Zone
		\tooldata Tool)
        
		IF Present(J) THEN
            Move_internal \J, ToPoint \Speed?Speed \Zone?Zone \Tool?Tool \Sync;
        ELSEIF Present(L) THEN
            Move_internal \L, ToPoint \Speed?Speed \Zone?Zone \Tool?Tool \Sync;
		ELSE
			Move_internal ToPoint \Speed?Speed \Zone?Zone \Tool?Tool \Sync;
        ENDIF   

    BACKWARD
        ! TBD - 
        TPWrite "MoveSync BACKWARD, WaitSyncTask not possible";
        Move_internal ToPoint \Speed?Speed \Zone?Zone \Tool?Tool;

        ERROR
            IF ERRNO = ERR_PATH_STOP OR ERRNO = ERR_COLL_STOP THEN
               ! Asynchronous error handling. Raise the error to the user without ending instruction
                RaiseToUser \Continue;
            ELSE
               ! Instruction detects the error, instruction is ended
               RAISE;
            ENDIF

    ENDPROC

    !-----------------------------------------------------------------------
    ! Move_internal - Moves to a robtarget with hardcoded speeddata and zonedata.
    !                 Depending on the task executing, it uses Hand1 or Hand2 as tooldata.
    !                 Syntax - PROC Move(robtarget ToPoint);
    LOCAL PROC Move_internal (
		\switch J | switch L,
		robtarget ToPoint
        \speeddata Speed
        \zonedata Zone
		\tooldata Tool
        \switch Sync)
        
        VAR robtarget move_robt_local;
        VAR robtarget pCurrentPosition;
		VAR Pose pDiff;
		VAR num linDist;
		VAR num angDist;

        move_robt_local:=ToPoint;
        ! Set Zone to use
        IF Present(Speed) THEN
            YuMi_App_move_speed_local:=Speed;
        ELSE
            GetSpeedData YuMi_App_move_speed_local;
        ENDIF
        ! Limit the reorientation velocity of the TCP expressed in degrees/s. 
        YuMi_App_move_speed_local.v_ori:=100;
        
        ! Set Zone to use
        IF Present(Sync) THEN
            YuMi_App_move_zone_local:=Fine;
        ELSE
            IF Present(Zone) THEN
                YuMi_App_move_zone_local:=Zone;
            ELSE
                GetZoneData YuMi_App_move_zone_local;
            ENDIF
        ENDIF
        IF Present(Tool) THEN
            YuMi_App_move_tool_local := Tool;
        ELSE
            GetToolData YuMi_App_move_tool_local;
        ENDIF
		SingArea \Wrist;
        !IF GetTaskName() = "T_ROB_R" THEN
		!	MoveL move_robt_local, YuMi_App_move_speed_local, YuMi_App_move_zone_local,YuMi_App_move_tool_local;
			!MoveL CalcRobT(move_robt_local,YuMi_App_move_tool_local), YuMi_App_move_speed_local, YuMi_App_move_zone_local,YuMi_App_move_tool_local;
            !MoveAbsJ move_robt_local, YuMi_App_move_speed_local, YuMi_App_move_zone_local, YuMi_App_move_tool_local;
        !ELSEIF GetTaskName() = "T_ROB_L" THEN
		!	MoveL move_robt_local, YuMi_App_move_speed_local, YuMi_App_move_zone_local,YuMi_App_move_tool_local;
			!MoveL CalcRobT(move_robt_local,YuMi_App_move_tool_local), YuMi_App_move_speed_local, YuMi_App_move_zone_local,YuMi_App_move_tool_local;
            !MoveAbsJ move_robt_local, YuMi_App_move_speed_local, YuMi_App_move_zone_local, YuMi_App_move_tool_local;
        !ELSE
        !    ErrWrite "Move ERROR", "Wrong taskname on task." \RL2:="Taskname: "+GetTaskName() \RL3:="Change taskname in configuration.";
        !    SystemStopAction \StopBlock;
        !ENDIF
		IF Present(L) THEN
            MoveL move_robt_local, YuMi_App_move_speed_local, YuMi_App_move_zone_local,YuMi_App_move_tool_local;
        ELSEIF Present(J) THEN
			MoveJ move_robt_local, YuMi_App_move_speed_local, YuMi_App_move_zone_local,YuMi_App_move_tool_local;
		ELSE
			pCurrentPosition:=CRobT(\Tool:=YuMi_App_move_tool_local);        
			pDiff:=PoseMult(PoseInv([pCurrentPosition.trans,pCurrentPosition.rot]),[move_robt_local.trans,move_robt_local.rot]);
			linDist:=VectMagn(pDiff.trans);
			angDist:=2*acos(abs(pDiff.rot.q1));
			IF linDist>150 OR angDist > 20 THEN
				MoveJ move_robt_local, YuMi_App_move_speed_local, YuMi_App_move_zone_local,YuMi_App_move_tool_local;
			ELSE
				MoveL move_robt_local, YuMi_App_move_speed_local, YuMi_App_move_zone_local,YuMi_App_move_tool_local;
			ENDIF
		ENDIF
         IF Present(Sync) THEN
            WaitSyncTask YuMi_App_sync1, YuMi_App_task_list;
        ENDIF
        
        ERROR
            IF ERRNO = ERR_PATH_STOP OR ERRNO = ERR_COLL_STOP THEN
               ! Asynchronous error handling. Raise the error to the user without ending instruction
                RaiseToUser \Continue;
            ELSE
               ! Instruction detects the error, instruction is ended
               RAISE;
            ENDIF
   
    ENDPROC

	!-----------------------------------------------------------------------
    ! Hand - Open hand. 
    ! Syntax - PROC OpenHand(\PERS loaddata Load);
	PROC OpenHand(\PERS loaddata Load)
	   Hand FALSE, \Load?Load;
    BACKWARD

	 ERROR
		RAISE;

	ENDPROC

	!-----------------------------------------------------------------------
    ! Hand - Close hand. 
    ! Syntax - PROC CloseHand(\PERS loaddata Load);
	PROC CloseHand(\PERS loaddata Load)
       Hand TRUE, \Load?Load;
    BACKWARD

     ERROR
         RAISE;

	ENDPROC

    !-----------------------------------------------------------------------
    ! Hand - Open/close hand. 
    !        1) Waits until robot is inpos. 
    !        2) Call drivers to open or close hand.
    !        3) Set payload for task executing.
    !           If Open is ordered, set load0.
    !           If close ordered, set the right payload using
    !           HandRight_payload for T_ROB_R and
    !           HandLeft_payload for T_ROB_L.
    !        HandLeft_payload and HandRight_payload is PERS variables declared
    !        in this module and is updated by the "Lets get started" application.
    ! Syntax - PROC Hand(bool action, \PERS loaddata Load);
    LOCAL PROC Hand (bool action, \PERS loaddata Load)

        WaitRob \InPos; 
		      
        IF action THEN
            ! Close ordered           
            Hand_GripInward;
        ELSE
            ! Open ordered
            Hand_GripOutward;
            Hand_Stop;
        ENDIF

		IF Present(Load) THEN
			GripLoad Load;
		ELSE
			IF action THEN
				IF GetTaskName() = "T_ROB_R" THEN
					GripLoad YuMi_App_SelLoadR;
				ELSEIF GetTaskName() = "T_ROB_L" THEN
					GripLoad YuMi_App_SelLoadL;
				ELSE
					ErrWrite "Hand ERROR", "Wrong taskname on task." \RL2:="Taskname: "+GetTaskName() \RL3:="Change taskname in configuration.";
					SystemStopAction \StopBlock;
				ENDIF
			ELSE
				GripLoad load0;
			ENDIF
		ENDIF

        ERROR
            RAISE;
    ENDPROC

	LOCAL PROC GetSpeedData(PERS speeddata loc)
        IF GetTaskName()="T_ROB_R" THEN
            loc := YuMi_App_SelSpeedR;
        ELSEIF GetTaskName()="T_ROB_L" THEN
            loc := YuMi_App_SelSpeedL;
        ELSE
            ErrWrite "GetSpeedData()","Wrong taskname on task."\RL2:="Taskname: "+GetTaskName()\RL3:="Change taskname in configuration.";
            SystemStopAction\StopBlock;
        ENDIF
    ENDPROC
    LOCAL PROC GetZoneData(PERS zonedata loc)
        IF GetTaskName()="T_ROB_R" THEN
            loc := YuMi_App_SelZoneR;
        ELSEIF GetTaskName()="T_ROB_L" THEN
            loc := YuMi_App_SelZoneL;
        ELSE
            ErrWrite "GetZoneData()","Wrong taskname on task."\RL2:="Taskname: "+GetTaskName()\RL3:="Change taskname in configuration.";
            SystemStopAction\StopBlock;
        ENDIF
    ENDPROC
    LOCAL PROC GetToolData(PERS tooldata loc)
		VAR tooldata loc1;
        IF GetTaskName()="T_ROB_R" THEN
			GetDataVal "GripperR",loc1;
            loc := loc1;
        ELSEIF GetTaskName()="T_ROB_L" THEN
			GetDataVal "GripperL",loc1;
            loc := loc1;
        ELSE
            ErrWrite "GetToolData()","Wrong taskname on task."\RL2:="Taskname: "+GetTaskName()\RL3:="Change taskname in configuration.";
            SystemStopAction\StopBlock;
        ENDIF
    ENDPROC
ENDMODULE