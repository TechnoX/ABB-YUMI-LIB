MODULE YuMi_App_Vision_R(SYSMODULE)
	 !
     ! This code was generated by a tool.
	 ! Changes to this file may cause incorrect behavior and will be lost if
	 ! the code is regenerated.
	 !--------------------------
	CONST string YuMi_App_Version_Vision_Arm := "1.0.0";

	PROC ShowABBLogo()
        ! Hand presenting the ABB Logo to the other camera
        CONST robtarget pShowABBLogo := [[400,-200,400],[0,0,0,-1],[1,0,0,11],[-110,9E+09,9E+09,9E+09,9E+09,9E+09]];
		MoveJ pShowABBLogo, v50, fine, tool0; 
		Stop;
	ENDPROC

	PROC VisionPick(
        robtarget ToPoint,
        \speeddata Speed
        \zonedata Zone
		\tooldata Tool)
        
        VAR cameratarget camtarget;
        VAR robtarget temprobtarget;
        VAR num cameraValue{3};
        VAR string currentjob;
        VAR cameradev camera;
        
        VAR pose tablePose;
        VAR robtarget mRobTarget;
        VAR robtarget pTakePicture;
        
        Move ToPoint \Speed?Speed \Zone?Zone \Tool?Tool;
        WaitTime \InPos, 0;
        
        pTakePicture := CRobT(\Tool:=tHandCamera\WObj:=wobj0); 
        
        OpenHand;
        
        IF HEMLIGT(YuMi_App_VisionCamera, camera) = FALSE THEN
            TPWrite "Cannot find camera with name: " + YuMi_App_VisionCamera;
            STOP;
        ENDIF
        
        currentjob:=CamGetLoadedJob(camera);
        IF currentjob = "" THEN
            TPWrite "No job loaded in camera " + YuMi_App_VisionCamera;
            STOP;
        ENDIF
        
        !Load camera job definition
        InitCamera camera, currentjob;
        
        !Take the photo and get the result
        TakePicture camera, cameraValue;
        
        tablePose.trans := Yumi_App_Table_Pose.trans;
        tablePose.rot := OrientZYX(180,0,180);
        WObj_VisionTest.uframe:=[pTakePicture.trans,pTakePicture.rot];
        WObj_VisionTest.oframe:=CalcObjFrame(PoseMult(PoseInv(WObj_VisionTest.uframe),tablePose),[CameraValue{1},CameraValue{2},CameraValue{3}],-Yumi_App_ZOffset,HandCamera_Kinv);
        !tHandCamera.tframe:=PoseMult(robotTCP.tframe,WObj_VisionTest.oframe);
        !mRobTarget:=FindOptimalConfiguration(pPick,GripperR\WObj:=WObj_VisionTest\Axis5Positive);
        mRobTarget:=pPick;
        mRobTarget.robconf:=[0,0,0,11];
        !Note that the offs is relative to the Camera frame
        MoveL Offs(mRobTarget,0,0,-50), v100, fine, GripperR\WObj:=WObj_VisionTest;
        MoveL mRobTarget, v100, fine, GripperR\WObj:=WObj_VisionTest;
        !Hand_TurnOnVacuum1;
        Hand_GripInward;
        MoveL Offs(mRobTarget,0,0,-50),v100,fine,GripperR\WObj:=WObj_VisionTest;
        
    ENDPROC

	PROC TrainVisionPick()
        VAR robtarget pTakePicture:=[[362.37,-97.70,370.14],[2.49306E-05,-0.699698,-0.714439,2.15999E-06],[0,-1,-2,11],[-150.4,9E+09,9E+09,9E+09,9E+09,9E+09]];
        !CONST robtarget pTakePicture2:=[[400.37,-50.70,480.14],[2.49306E-05,-0.699698,-0.714439,2.15999E-06],[0,-1,-2,11],[-150.4,9E+09,9E+09,9E+09,9E+09,9E+09]];
        VAR num CameraValue{3};
        VAR robtarget mRobTarget;
        VAR pose tablePose;
        VAR string currentjob;
        VAR cameradev camera;

        SingArea\Wrist;
        
        !MoveL pTakePicture,v50,fine,tHandCamera;
        pTakePicture := CRobT(\Tool:=tHandCamera\WObj:=wobj0); 
        Hand_GripOutward;
        !tHandCamera.tload:=HandRight.tload;
        !MoveL pTakePicture,v200,fine,tHandCamera;
        
        !Open gripper
        !Set DO10_1;

        IF HEMLIGT(YuMi_App_VisionCamera, camera) = FALSE THEN
            TPWrite "Cannot find camera with name: " + YuMi_App_VisionCamera;
            STOP;
        ENDIF
        
        currentjob:=CamGetLoadedJob(camera);
        IF currentjob = "" THEN
            TPWrite "No job loaded in camera " + YuMi_App_VisionCamera;
            STOP;
        ENDIF

        
        !Load job that locates part
        InitCamera camera,currentjob;
        !InitCamera HandCameraR,"Part_A.job";

        TakePicture camera,CameraValue;
        TPWrite "CameraValue"\Pos:=[CameraValue{1},CameraValue{2},CameraValue{3}];
        tablePose.trans := Yumi_App_Table_Pose.trans;
        tablePose.rot := OrientZYX(180,0,180);
        WObj_VisionTest.uframe:=[pTakePicture.trans,pTakePicture.rot];
        WObj_VisionTest.oframe:=CalcObjFrame(PoseMult(PoseInv(WObj_VisionTest.uframe),tablePose),[CameraValue{1},CameraValue{2},CameraValue{3}],-Yumi_App_ZOffset,HandCamera_Kinv);
        !tHandCamera.tframe:=PoseMult(robotTCP.tframe,WObj_VisionTest.oframe);
        !mRobTarget:=FindOptimalConfiguration(pPick,GripperR\WObj:=WObj_VisionTest\Axis5Positive);
        mRobTarget:=pPick;
        mRobTarget.robconf:=[0,0,0,11];
        !Note that the offs is relative to the Camera frame
        MoveL Offs(mRobTarget,0,0,-50), v50, fine, GripperR\WObj:=WObj_VisionTest;
		VisionStatus := 1;
		Stop;
        MoveL mRobTarget, v50, fine, GripperR\WObj:=WObj_VisionTest;
        !Hand_TurnOnVacuum1;
        Hand_GripInward;
        MoveL Offs(mRobTarget,0,0,-50),v50,fine,GripperR\WObj:=WObj_VisionTest;
        Hand_GripOutward;
        !Hand_TurnOffVacuum1;
        !Hand_TurnOnBlow1;
        !WaitTime 1;
        !Hand_TurnOffBlow1;
        !MoveL [[395.60,-295.28,111.92],[6.11021E-05,-0.526551,-0.850144,2.23703E-05],[0,-2,0,11],[-158.118,9E+09,9E+09,9E+09,9E+09,9E+09]], v200, fine, GripperR;
        !Hand_GripOutward;
        MoveL pTakePicture, v50, fine, tHandCamera;
        RETURN ;
        MoveJ pPick, v300, fine, GripperR\WObj:=WObj_VisionTest;
    ENDPROC

	!*****************Calib_InspectionCamera******************
    !*Use this routine to calibrate InspectionCamera
    !*************************************************************
    PROC Calib_HandCamera()
        !Define these points so that they fit within the field of view of the camera. 
        !The first four points define the four corners of the field of view at the highest altitude (z-direction) of the calibration pyramid pattern.
        !The fifth point defines the lowest point that the robot may reach during the calibration run (in z-direction). 
        CONST robtarget pCamera_Calib_4:=[[425.57,-60,457.94],[0.963591,0.0128538,-0.267033,0.0046038],[1,0,1,11],[-102.11,9E+09,9E+09,9E+09,9E+09,9E+09]]; !Correct orientation
        CONST robtarget pCamera_Calib_3:=[[368.07,-60,424.92],[0.963598,0.0129005,-0.267003,0.0046068],[1,-1,1,11],[-102.03,9E+09,9E+09,9E+09,9E+09,9E+09]];
        CONST robtarget pCamera_Calib_2:=[[431.13,-60,337.42],[0.963594,0.0128811,-0.26702,0.00459979],[1,-1,1,11],[-102.057,9E+09,9E+09,9E+09,9E+09,9E+09]];
        CONST robtarget pCamera_Calib_1:=[[479.97,-60.59,357.86],[0.963591,0.0128549,-0.267033,0.00460414],[1,-1,1,11],[-102.101,9E+09,9E+09,9E+09,9E+09,9E+09]];
        CONST robtarget pCamera_Calib_5:=[[424.90,-280,349.23],[0.966064,-2.11471E-05,-0.258303,-0.000303178],[1,0,1,11],[-102,9E+09,9E+09,9E+09,9E+09,9E+09]];
        CONST robtarget pCamera_Calib_train:=[[400,-175,380],[0.963589,0.0128558,-0.267037,0.00460837],[1,0,1,11],[-102,9E+09,9E+09,9E+09,9E+09,9E+09]];
        VAR robtarget robTargets{5};
        VAR wobjdata CameraWobj:=[FALSE,TRUE,"",[[21.4601,-1062.56,1134.32],[0.999437,-0.00286496,-0.00635449,0.0328053]],[[0,0,0],[1,0,0,0]]];
        
        VAR string markerFinderJob := "PatternABB.job";
        VAR pose cameraFrame;
        VAR pos markerPos;
        VAR cameradev handCamera;
        !The reference robtargets that define the calibration pose envelope
        robTargets:=[pCamera_Calib_1,pCamera_Calib_2,pCamera_Calib_3,pCamera_Calib_4,pCamera_Calib_5];

        IF HEMLIGT(YuMi_App_VisionCamera, handCamera) = FALSE THEN
            TPWrite "Cannot find camera " + YuMi_App_VisionCamera;
            RETURN;
        ENDIF
        
		!Get jobs from controller
        RestoreCtrlToCamera handCamera, FALSE;

        !Initialize the camera
        InitCamera handCamera,markerFinderJob;
       
        !Run the calibration sequence. The location of the camera is stored in cameraWobjcalib and the position of the marker is stored in robotTCPcalib.
        CalibCamera robTargets,tool_YuMiGripper_S_C,cameraFrame,markerPos,handcamera\Kinv:=HandCamera_Kinv\K:=HandCamera_K\print\HandHeldCamera;

        tHandCamera.tframe:=cameraFrame;
        tHandCamera.tload:=GripperR.tload;
        
		Calibrated := 1;

        Stop;
        !CalibTest_Camera HandCameraR,markerFinderJob;

        IF OpMode()=OP_AUTO THEN
            RETURN ;
        ELSE
            Stop;
        ENDIF

        SingArea\Wrist;
        MoveJ pCamera_Calib_1,v200,fine,tool_YuMiGripper_S_C;
        MoveL pCamera_Calib_2,v200,fine,tool_YuMiGripper_S_C;
        MoveL pCamera_Calib_3,v200,fine,tool_YuMiGripper_S_C;
        MoveL pCamera_Calib_4,v200,fine,tool_YuMiGripper_S_C;
        MoveL pCamera_Calib_5,v200,fine,tool_YuMiGripper_S_C;
        MoveL pCamera_Calib_train,v200,fine,tool_YuMiGripper_S_C;
    ENDPROC
ENDMODULE